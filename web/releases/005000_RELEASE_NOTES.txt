# created: 20.07.2007 (-1)
# last revision: 02.09.2008

from 00.46.02 to 00.50.00:
==========================
- finite strain elasticity: neo-Hookean, Mooney-Rivlin materials
  - total Lagrangian (TL) formulation
  - geometric data via finite_strain_tl DataCache
- solving problems in complex numbers
- generalized equations to allow linear combination of terms
  - example: """2 * aterm.i1.Omega( v, u ) = - 3.0 * bterm.i1.Omega2( v, u )""" 
- run-time type of state term arguments
  - removed all *_r terms, now useless
- 'elements by function( domain )' region selector
- refactoring to follow Python coding style guidelines
- history support in variables
- MeshIO.read_dimension() to quickly get dimension in an input file
- improved site_cfg_template.py
- improved schroedinger.py
- new terms:
  - de_average_variable (average a variable in elements)
  - dw_surface_integrate (integrate over surface operator)
  - dw_tl_bulk_penalty (bulk penalty in TL formulation)
  - dw_tl_he_neohook (neo-Hooekan term in TL formulation)
  - dw_tl_he_mooney_rivlin (Mooney-Rivlin term in TL formulation)

from 00.41.03 to 00.46.02:
==========================
- alternative short syntax for specifying essential boundary conditions,
  variables and  regions
- saving results per variable (useful when variables defined in different
  subdomains)
- manufactured solutions tests:
    - SymPy support
- new eigenvalue solvers:
    - removed symeig dependence
- linear solvers based on PyAMG
- simple block mesh generator
- unified HDF5 mesh/solution reading/writing
- site configuration now via script/config.py + site_cfg.py
- example: computing homogenized elastic coefficients
- new terms and lots of reorganization:
    - Biot terms
    - some fading memory terms

from 00.35.01 to 00.41.03:
==========================
- works on 64 bits
- support for various mesh formats:
    - medit: .mesh
    - text VTK: .vtk
    - tetgen: .node + .ele
    - comsol: .txt
- Schroedinger equation solver
    - run via 'schroedinger.py'
- input files:
    - new syntax for variables and boundary conditions
    - improved handling of degrees of freedom
- more descriptive (and less) test and simulation messages
- new handling of approximations (-> lots of thing simplified)
- material parameters can be defined in mesh vertices
- simple.py: allow user-specified postProcessHook function
- documentation generation via prettydoc
- new solvers:
    - generic time-dependent problem solver
    - pysparse, symeig, scipy-based eigenproblem solvers
    - scipy-based iterative solvers
- new terms:
    - dw_volume_integrate (volume integral operator)
    - dw_mass_scalar_r (rhs for time-dependent Poisson problem)
    - di_volume_integrate_mat (integrate material parameters)
    - dw_volume_wdot and related terms (weighted dot product)
    - dw_mass_scalar_variable (scalar mass term with variable coefficients)
    - dw_lin_elastic and related terms (anisotropic linear elasticity)
    - dw_lin_viscous (linear viscosity)
    - de_cauchy_stress (element-averaged Cauchy stress)

from 00.31.06 to 00.35.01:
==========================
- per term integration, major rewrite of sfe.fem and related:
    - term.integral.domain( arguments ) syntax
    - 'integral_*' keyword for input files
    - each term can use its own quadrature points
    - 'field' keyword syntax changed

- minor:
    - genDocs.py: PDF term documentation generator

from 00.26.01 to 00.31.06:
==========================

- acoustic band gaps determination:
    - zones of frequencies where elastic waves do not propagate
    - based on homogenization of material made of small inclusions periodically
    embedded in an elastic matrix
    - run via 'eigen.py'
- general linear combination boundary conditions - 'lcbc' keyword:
    - rigid body motion constraint imposed on regions
- new Solver classes, solver reorganization:
    - all solvers now configured in a uniform way ('solver_[0-9]+' keywords)
    - specify solvers using 'options' keyword
- new terms:
    - dot product in a volume or on a surface region
    - vector field mass term
    - scalar field "mass", fine-coarse scalar "mass" terms:
        - used for coarse mesh -> fine mesh interpolation of scalar fields

- minor:
    - added updated findSurf.py into distribution - extract surface from a mesh
    - script/kill_*
    - script/writeMesh2D.m
    - script/writeSparseMatrixHDF5.m

from 00.22.02 to 00.26.01:
==========================

- testing framework (in the spirit of unit tests):
    - particularly tests that standard input files work
    - runTests.py: output filtering
- linear spring term (kind of a relaxed Dirichlet BC on node displacements)
- volume term
- Laplace term in 2D
- chained periodic boundary conditions resolving
- new options for simple.py: --save-field-meshes, --solve-not
- periodic mesh merger (genPerMesh.py)

- minor:
    - improved region saving
    - growing term data cache
    - sparse matrix saving into HDF5
    - point dof connectivity and geometry
    - region handling improvements (canCells flag)
    - nonlinear solver status reporting
    - distribution: test and example meshes included in the release tarball
