#summary Example of usage
#labels Featured

See also [http://ui505p06-mbs.ntc.zcu.cz/sfe/Examples]

== Comparing various elastic material models ==

{{{
$ python examples/compare_elastic_materials.py
sfepy: reading mesh (examples/el3.mesh)...
sfepy: ...done in 0.00 s
sfepy: setting up domain edges...
sfepy: ...done in 0.00 s
sfepy: setting up domain faces...
sfepy: ...done in 0.00 s
sfepy: creating regions...
sfepy:     leaf Top region__0
sfepy:     leaf Omega region__1
sfepy:     leaf Bottom region__2
sfepy: ...done in 0.03 s
sfepy: using solvers:
                ts: ts
               nls: newton
                ls: ls
sfepy: equation "neoHookean":
sfepy: dw_tl_he_neohook.i1.Omega( solid.mu_nh, v, u )
                        + dw_tl_bulk_penalty.i1.Omega( solid.K, v, u )
                        = dw_surface_ltr.isurf.Top( load.val, v )
...
... long output snipped
...
sfepy: ====== time 1.000000e+00 (step 101 of 101) =====
sfepy: updating materials...
sfepy:     solid
sfepy:     load
sfepy: ...done in 0.00 s
sfepy: nls: iter: 0, residual: 2.000000e-01 (rel: 1.000000e+00)
sfepy:   rezidual:    0.00 [s]
sfepy:      solve:    0.01 [s]
sfepy:     matrix:    0.00 [s]
sfepy: nls: iter: 1, residual: 1.258155e-03 (rel: 6.290777e-03)
sfepy:   rezidual:    0.00 [s]
sfepy:      solve:    0.00 [s]
sfepy:     matrix:    0.01 [s]
sfepy: nls: iter: 2, residual: 6.329184e-08 (rel: 3.164592e-07)
sfepy:   rezidual:    0.00 [s]
sfepy:      solve:    0.00 [s]
sfepy:     matrix:    0.01 [s]
sfepy: nls: iter: 3, residual: 1.379673e-14 (rel: 6.898363e-14)
}}}

Then look at 'pressure_displacement.png':

http://sfepy.googlecode.com/svn/web/examples/pressure_displacement.png

== Computing homogenized elasticity ==

To allow for materials with complex microstructure and at the same time to avoid a full computation on the microscopic scale (not feasible), the homogenization method is a suitable tool. This [ExampleHomogenizedElasticity example] illustrates computing the homogenized elasticity coefficients.

== Schroedinger ==

The `schroedinger.py` script can calculate a lot of one electron examples from QM.

For example a linear harmonic oscillator in 2D:

{{{
$ ./schroedinger.py --mesh --2d
$ ./schroedinger.py --oscillator
[...]
Energies:
n      exact         FEM      error
0:  1.00000000   1.00081703   0.08%
1:  2.00000000   2.00158339   0.08%
2:  2.00000000   2.00175346   0.09%
3:  3.00000000   3.00302269   0.10%
4:  3.00000000   3.00334897   0.11%
5:  3.00000000   3.00346025   0.12%
6:  4.00000000   4.00498898   0.12%
7:  4.00000000   4.00571512   0.14%
8:  4.00000000   4.00606336   0.15%
9:  4.00000000   4.00631703   0.16%
10:  5.00000000   5.00743227   0.15%
11:  5.00000000   5.00868813   0.17%
12:  5.00000000   5.00947456   0.19%
13:  5.00000000   5.01031228   0.21%
14:  5.00000000   5.01042976   0.21%
15:  6.00000000   6.01161255   0.19%
Solution saved to mesh.vtk
}}}

See SchroedingerEquation for more examples.

=== Images ===

11th eigenvalue (calculated: -0.04398532, exact: -0.056), on the mesh with 976 691 tetrahedrons and 163 666 nodes, for the hydrogen atom (`V=-1/r`):

http://sfepy.googlecode.com/svn/web/schrodinger/hydrogen-10.png

Other images for harmonic oscillator:

http://sfepy.googlecode.com/svn/web/schrodinger/p10.png
http://sfepy.googlecode.com/svn/web/schrodinger/p12.png
http://sfepy.googlecode.com/svn/web/schrodinger/p12-o.png
http://sfepy.googlecode.com/svn/web/schrodinger/p17.png

== Tests ==

All tests should pass:
{{{
$ ./runTests.py 
<<< directory: tests, test files: 14
tests/test_base.py
+++   test_structAdd: ok
+++   test_structIAdd: ok
tests/test_elasticity_small_strain.py
+++   test_linear_terms: ok
tests/test_input_kostka.py
+++   test_input: ok
tests/test_input_le.py
+++   test_input: ok
tests/test_input_navier_stokes.py
+++   test_input: ok
tests/test_input_poisson.py
+++   test_input: ok
tests/test_io.py
+++   test_recursiveDictHDF5: ok
+++   test_sparseMatrixHDF5: ok
tests/test_lcbc_2d.py
+++   test_linearRigidBodyBC: ok
tests/test_lcbc_3d.py
+++   test_linearRigidBodyBC: ok
tests/test_meshio.py
+++   test_readMeshes: ok
+++   test_compareSameMeshes: ok
tests/test_parsing.py
+++   test_parseEquations: ok
+++   test_parseRegions: ok
tests/test_periodic_bc_2d.py
+++   test_pbc: ok
tests/test_periodic_bc_3d.py
+++   test_pbc: ok
tests/test_quadratures.py
+++   test_problemCreation: ok
14 test file(s) executed in 13.51 s, 0 failure(s) of 18 test(s)
}}}

If some test fails, run it with `--debug`:
{{{
$ ./runTests.py --debug
[...]
}}}
This will stop on the first error. You can also execute some particular test file only:
{{{
$ ./runTests.py tests/test_lcbc_3d.py
tests/test_lcbc_3d.py
+++   test_linearRigidBodyBC: ok
1 test file executed in 0.00 s, 0 failure(s) of 1 test(s)
}}}

== Heat conduction ==
{{{
$ ./simple.py input/time_poisson.py
sfe: warning: other missing: ['functions', 'modules', 'epbc_[0-9]+|epbcs', 'lcbc_[0-9]+|lcbcs', 'nbc_[0-9]+|nbcs']
sfe: reading mesh...
sfe: ...done in 0.03 s
sfe: setting up domain edges...
sfe: ...done in 0.02 s
sfe: setting up domain faces...
sfe: ...done in 0.02 s
sfe: creating regions...
sfe:     leaf Gamma_Right region_4
sfe:     leaf Omega region_1000
sfe:     leaf Gamma_Left region_03
sfe: ...done in 0.07 s
sfe: equation "Temperature":
sfe:   dw_laplace.i1.Omega( coef.val_dt, s, t )
       + dw_mass_scalar.i1.Omega( s, t ) = dw_mass_scalar_r.i1.Omega( s, t0 )
sfe: describing geometries...
sfe: ...done in 0.01 s
sfe: setting up dof connectivities...
sfe: ...done in 0.00 s
sfe: using solvers:
                ts: ts
               nls: newton
                ls: ls
sfe: ====== time 0.000000e+00 (step  1 of 10) =====
sfe: matrix shape: (300, 300)
sfe: assembling matrix graph...
sfe: ...done in 0.00 s
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
sfe: ====== time 1.111111e-01 (step  2 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 1.176265e-05 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 9.083702e-21 (rel: 7.722493e-16)
sfe: ====== time 2.222222e-01 (step  3 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 2.716326e-06 (rel: 1.000000e+00)
  rezidual:    0.01 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 4.308282e-21 (rel: 1.586070e-15)
sfe: ====== time 3.333333e-01 (step  4 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 1.437913e-06 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.546256e-21 (rel: 2.466252e-15)
sfe: ====== time 4.444444e-01 (step  5 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 9.418369e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.00 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 2.928262e-21 (rel: 3.109096e-15)
sfe: ====== time 5.555556e-01 (step  6 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 6.543687e-07 (rel: 1.000000e+00)
  rezidual:    0.01 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.465069e-21 (rel: 5.295286e-15)
sfe: ====== time 6.666667e-01 (step  7 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 4.620136e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.00 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 3.647033e-21 (rel: 7.893777e-15)
sfe: ====== time 7.777778e-01 (step  8 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 3.276678e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.00 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 3.435623e-21 (rel: 1.048508e-14)
sfe: ====== time 8.888889e-01 (step  9 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 2.326953e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.214248e-21 (rel: 1.381312e-14)
sfe: ====== time 1.000000e+00 (step 10 of 10) =====
sfe: updating materials...
sfe:     coef
sfe: ...done in 0.00 s
nls: iter: 0, out-of-balance: 1.653207e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.00 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 3.198397e-21 (rel: 1.934662e-14)
}}}

Then run paraview, open simple_out..vtk files, and launch the animation.

== Acoustic band gaps ==

 * set 'text.usetex' to 'True' and lines.linewidth to 3 in your matplotlibrc
 * run:
{{{
$ ./eigen.py -p input/phono.py
/home/share/software/usr/lib/python2.4/site-packages/scipy/sparse/linalg/dsolve/linsolve.py:20: DeprecationWarning: scipy.sparse.linalg.dsolve.umfpack will be removed, install scikits.umfpack instead
  ' install scikits.umfpack instead', DeprecationWarning )
eigen: warning: other missing: ['functions', 'modules', 'epbc_[0-9]+|epbcs', 'lcbc_[0-9]+|lcbcs', 'nbc_[0-9]+|nbcs']
eigen: warning: left over: ['clip', 'selectInPlane', 'normalize', 'nm', 'geom', '__doc__', 'dim']
eigen: reading mesh...
eigen: ...done in 0.05 s
eigen: setting up domain edges...
eigen: ...done in 0.01 s
eigen: creating regions...
eigen:     leaf Y1 region_1
eigen:     leaf Y region_1000
eigen:     leaf Y2 region_2
eigen:     op Y2_Surface region_100
eigen: ...done in 0.04 s
eigen: equation "rhs":
eigen: dw_mass_vector.i1.Y2( inclusion.density, v, u )
eigen: equation "lhs":
eigen: dw_lin_elastic_iso.i1.Y2( inclusion.lame, v, u )
eigen: describing geometries...
eigen: ...done in 0.01 s
eigen: setting up dof connectivities...
eigen: ...done in 0.00 s
eigen: matrix shape: (406, 406)
eigen: assembling matrix graph...
eigen: ...done in 0.01 s
eigen: updating materials...
eigen:     matrix
eigen:     inclusion
eigen: ...done in 0.00 s
eigen: setting up dof connectivities...
eigen: ...done in 0.00 s
eigen: setting up dof connectivities...
eigen: ...done in 0.00 s
eigen: computing resonance frequencies...
eigen: ...done in 0.82 s
eigen: [    232.40156299     232.45829855     289.95997046 ...,  119585.50471959
  126661.98236838  132604.79235405]
eigen: volumes: 0.79067070822303875 0.2093292917769598 0.99999999999999856
eigen: densities: 0.2799 0.1142
eigen: average density: 0.24521413635255734
eigen: method: eig.sgscipy
eigen: freq. range             : [  15.245,   50.804]
eigen: freq. range with margins: [  11.689,   54.254]
eigen: mass matrix components...
computing: 100% |###############################################| Time: 00:00:10
eigen: ...done in 10.13 s
eigen: interval: ]11.68877816, 15.24472246[...
eigen:   [2, 11.688778163324915, 0.2683300317325728]
eigen:   [2, 11.688778163324915, 0.26833387013170645]
eigen: ...done
eigen: interval: ]15.24472246, 15.24658318[...
eigen:   finding zero of the largest eig...
eigen:   ...done
eigen:   finding zero of the smallest eig...
eigen:   ...done
eigen:   [1, 15.246583176111219, -63.199325600551674]
eigen:   [2, 15.244722463655851, 63.726122234686045]
...
eigen: interval: ]50.80416547, 54.25443895[...
eigen:   [2, 50.804165466965202, 0.21954353009874045]
eigen:   [2, 50.804165466965202, 0.21971889759333721]
eigen: ...done
eigen: 0 2 2 11.68877816 15.24472246
eigen:  -> propagation zone
    [(11.688778163324915, 15.244722463655851)]
eigen: 1 1 2 15.24472246 15.24658318
eigen:  -> full weak band gap
    [(15.244722463655851, 15.246583176166673)]
eigen: 2 0 0 15.24658318 17.02821102
eigen:  -> strong band gap + weak band gap + propagation zone
    [(15.246583176166673, 15.74506005680678), (15.74506005680678, 15.747410641568624), (15.747410641568624, 17.02821101763119)]
...
eigen: 30 2 2 50.80416547 54.25443895
eigen:  -> propagation zone
    [(50.804165466965202, 54.254438946289547)]
}}}
 * to get:

http://sfepy.googlecode.com/svn/web/acoustics/band_gaps.png