#summary Example of usage
#labels Featured

See also [http://ui505p06-mbs.ntc.zcu.cz/sfe/Examples]

== Schroedinger ==

The special-purpose script schroedinger.py implicitly uses input/schroed.py input file.

{{{
$ ./schroedinger.py
sfe: warning: other missing: ['functions', 'modules', 'epbc_[0-9]+|epbcs', 'lcbc_[0-9]+|lcbcs', 'nbc_[0-9]+|nbcs']
sfe: warning: left over: ['funV']
sfe: reading mesh...
       nodes: 100% |############################################| Time: 00:00:00
       elements: 100% |#########################################| Time: 00:00:02
sfe: ...done in 2.56 s
sfe: setting up domain edges...
sfe: ...done in 1.14 s
sfe: setting up domain faces...
sfe: ...done in 0.87 s
sfe: creating regions...
sfe:     leaf Omega region_1000
sfe:     leaf Surface region_2
sfe: ...done in 1.64 s
sfe: equation "rhs":
sfe: dw_mass_scalar.i1.Omega( v, Psi )
sfe: equation "lhs":
sfe:   dw_laplace.i1.Omega( m.val, v, Psi )
               + dw_mass_scalar_variable.i1.Omega( matV.V, v, Psi )
sfe: describing geometries...
sfe: ...done in 0.21 s
sfe: setting up dof connectivities...
sfe: ...done in 0.00 s
sfe: matrix shape: (7964, 7964)
sfe: assembling matrix graph...
sfe: ...done in 0.12 s
sfe: updating materials...
sfe:     m
sfe:     matV
sfe: ...done in 0.00 s
sfe: assembling lhs...
sfe:   setting up dof connectivities...
sfe:   ...done in 0.01 s
sfe: ...done in 0.32 s
sfe: assembling rhs...
sfe:   setting up dof connectivities...
sfe:   ...done in 0.01 s
sfe: ...done in 0.10 s
computing resonance frequencies...
loading...
solving...
number of converged eigenvalues: 10
done
[ 1.60246586  2.66350385  2.66592179  2.66745129  3.73764474  3.74251454
  3.74545591  3.74824003  3.75739244  3.78188468]
relative values:
[ 1.5         2.49319243  2.49545577  2.49688747  3.49864995  3.50320836
  3.50596165  3.50856774  3.51713492  3.54006107]
}}}

=== Images ===

11th eigenvalue (calculated: -0.04398532, exact: -0.056), on the mesh with 976 691 tetrahedrons and 163 666 nodes, for the hydrogen atom (`V=-1/r`):

http://sfepy.googlecode.com/svn/web/schrodinger/hydrogen-10.png

Other images for harmonic oscillator:

http://sfepy.googlecode.com/svn/web/schrodinger/p10.png
http://sfepy.googlecode.com/svn/web/schrodinger/p12.png
http://sfepy.googlecode.com/svn/web/schrodinger/p12-o.png
http://sfepy.googlecode.com/svn/web/schrodinger/p17.png

== Tests ==

All tests should pass:
{{{
$ ./runTests.py 
<<< directory: tests, test files: 14
tests/test_base.py
+++   test_structAdd: ok
+++   test_structIAdd: ok
tests/test_elasticity_small_strain.py
+++   test_linear_terms: ok
tests/test_input_kostka.py
+++   test_input: ok
tests/test_input_le.py
+++   test_input: ok
tests/test_input_navier_stokes.py
+++   test_input: ok
tests/test_input_poisson.py
+++   test_input: ok
tests/test_io.py
+++   test_recursiveDictHDF5: ok
+++   test_sparseMatrixHDF5: ok
tests/test_lcbc_2d.py
+++   test_linearRigidBodyBC: ok
tests/test_lcbc_3d.py
+++   test_linearRigidBodyBC: ok
tests/test_meshio.py
+++   test_readMeshes: ok
+++   test_compareSameMeshes: ok
tests/test_parsing.py
+++   test_parseEquations: ok
+++   test_parseRegions: ok
tests/test_periodic_bc_2d.py
+++   test_pbc: ok
tests/test_periodic_bc_3d.py
+++   test_pbc: ok
tests/test_quadratures.py
+++   test_problemCreation: ok
14 test file(s) executed in 13.51 s, 0 failure(s) of 18 test(s)
}}}

If some test fails, run it with `--debug`:
{{{
$ ./runTests.py --debug
[...]
}}}
This will stop on the first error. You can also execute some particular test file only:
{{{
$ ./runTests.py tests/test_lcbc_3d.py
tests/test_lcbc_3d.py
+++   test_linearRigidBodyBC: ok
1 test file executed in 0.00 s, 0 failure(s) of 1 test(s)
}}}

== Heat conduction ==
{{{
$ ./simple.py input/time_poisson.py
warning: other missing: ['functions', 'modules', 'epbc', 'lcbc']
mesh.read =  0.04
t =  0.0
t =  0.0
t =  0.01
t =  0.02
t =  0.0
t =  0.0
t =  0.01
t =  0.01
leaf Gamma_Right region_4
leaf Omega region_1000
leaf Gamma_Left region_03
Omega 3_4_P1
Temperature
  dw_laplace.i1.Omega( coef, s, t )
       + dw_mass_scalar.i1.Omega( s, t ) = dw_mass_scalar_r.i1.Omega( s, t0 )
using solvers:
           ts: ts
          nls: newton
           ls: ls
sfe: ====== time 0.000000e+00 (step  1 of 10) =====
sfe: matrix shape: (300, 300)
0.0
sfe: ====== time 1.111111e-01 (step  2 of 10) =====
nls: iter: 0, out-of-balance: 1.176265e-05 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 9.083702e-21 (rel: 7.722493e-16)
sfe: ====== time 2.222222e-01 (step  3 of 10) =====
nls: iter: 0, out-of-balance: 2.716326e-06 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 4.308282e-21 (rel: 1.586070e-15)
sfe: ====== time 3.333333e-01 (step  4 of 10) =====
nls: iter: 0, out-of-balance: 1.437913e-06 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.00 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 3.546256e-21 (rel: 2.466252e-15)
sfe: ====== time 4.444444e-01 (step  5 of 10) =====
nls: iter: 0, out-of-balance: 9.418369e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 2.928262e-21 (rel: 3.109096e-15)
sfe: ====== time 5.555556e-01 (step  6 of 10) =====
nls: iter: 0, out-of-balance: 6.543687e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.465069e-21 (rel: 5.295286e-15)
sfe: ====== time 6.666667e-01 (step  7 of 10) =====
nls: iter: 0, out-of-balance: 4.620136e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.00 [s]
    matrix:    0.01 [s]
nls: iter: 1, out-of-balance: 3.647033e-21 (rel: 7.893777e-15)
sfe: ====== time 7.777778e-01 (step  8 of 10) =====
nls: iter: 0, out-of-balance: 3.276678e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.435623e-21 (rel: 1.048508e-14)
sfe: ====== time 8.888889e-01 (step  9 of 10) =====
nls: iter: 0, out-of-balance: 2.326953e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.214248e-21 (rel: 1.381312e-14)
sfe: ====== time 1.000000e+00 (step 10 of 10) =====
nls: iter: 0, out-of-balance: 1.653207e-07 (rel: 1.000000e+00)
  rezidual:    0.00 [s]
     solve:    0.01 [s]
    matrix:    0.00 [s]
nls: iter: 1, out-of-balance: 3.198397e-21 (rel: 1.934662e-14)
}}}

Then run paraview, open simple_out..vtk files, and launch the animation.